@page "/"
@inject Application application
@implements IDisposable

<style>
    .binding {
        display: block;
    }
</style>

<h1>Services</h1>
<table class="table service-table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Source</th>
            <th>Bindings</th>
            <th>Replicas</th>
            <th>Restarts</th>
            <th>Logs</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var service in application.Services.Values)
        {
            var logsPath = $"logs/{service.Description.Name}";
            var servicePath = $"services/{service.Description.Name}";
            <tr @key="service.Description.Name">
                <td>
                    @if(service.ServiceType == ServiceType.External)
                    {
                        <span>@service.Description.Name</span>
                    }
                    else
                    {
                        <a href="@servicePath">@service.Description.Name</a>
                    }
                </td>
                <td>
                    @service.ServiceType
                </td>
                <td class="source-project">
                    @if (service.Description.RunInfo is ProjectRunInfo project)
                    {
                        <p>@project.ProjectFile.FullName</p>
                    }
                    else if (service.Description.RunInfo is DockerRunInfo docker)
                    {
                        <p>@docker.Image</p>
                    }
                </td>
                <td>
                    @if (service.Description.Bindings.Any())
                    {
                        foreach (var b in service.Description.Bindings)
                        {
                            if (b.Port != null)
                            {
                                if (b.Protocol == "http" || b.Protocol == "https")
                                {
                                    var url = GetUrl(b);
                                    <span class="binding"><a href="@url" target="_blank">@url</a></span>
                                    foreach (var r in b.Routes)
                                    {
                                        var routeUrl = url + r;
                                        <span class="binding"><a href="@routeUrl" target="_blank">@routeUrl</a></span>
                                    }
                                }
                                else
                                {
                                    <span class="binding">@GetUrl(b)</span>
                                }
                            }
                            else
                            {
                                <span class="binding">@b.ConnectionString</span>
                            }
                        }
                    }
                    else
                    {
                        <p>none</p>
                    }
                </td>
                @if(service.ServiceType == ServiceType.External)
                {
                    <td colspan=3></td>
                }
                else
                {
                    <td>@service.Replicas.Count/@service.Description.Replicas</td>
                    <td>@service.Restarts</td>
                    <td><NavLink href="@logsPath">View</NavLink></td>
                    <td>
                        @if (CanStartStop(service))
                        {
                            if (service.Replicas.Count == 0)
                            {
                                <button @onclick="async () => await StartServiceAsync(service)" class="btn btn-default btn-xs">
                                    <span class="oi oi-media-play"></span>
                                </button>
                            }
                            else
                            {
                                <button @onclick="async () => await StopServiceAsync(service)" class="btn btn-default btn-xs">
                                    <span class="oi oi-media-stop"></span>
                                </button>
                            }
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    static readonly ServiceType[] stopables = new[] { ServiceType.Container, ServiceType.Executable, ServiceType.Project, ServiceType.Function };
    private List<IDisposable> _subscriptions = new List<IDisposable>();

    bool CanStartStop(Service? service)
    {
        return service != null && stopables.Contains(service.ServiceType);
    }

    string GetUrl(ServiceBinding b)
    {
        return $"{(b.Protocol ?? "tcp")}://{b.Host ?? "localhost"}:{b.Port}";
    }

    protected override void OnInitialized()
    {
        foreach (var a in application.Services.Values)
        {
            _subscriptions.Add(a.ReplicaEvents.Subscribe(OnReplicaChanged));
        }
    }

    private void OnReplicaChanged(ReplicaEvent replicaEvent)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task StartServiceAsync(Service service)
    {
        if (service.ServiceType == ServiceType.Container)
        {
            await DockerRunner.RestartContainerAsync(service);
        }
        else
        {
            await ProcessRunner.RestartService(service);
        }
    }

    private async Task StopServiceAsync(Service service)
    {
        if (service.ServiceType == ServiceType.Container)
        {
            await DockerRunner.StopContainerAsync(service);
        }
        else
        {
            await ProcessRunner.KillProcessAsync(service);
        }
    }


    void IDisposable.Dispose()
    {
        _subscriptions.ForEach(d => d.Dispose());
    }
}
