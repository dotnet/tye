@page "/"
@inject Application application
@implements IDisposable

<style>
    .binding {
        display: block;
    }
</style>

<h1>Services</h1>
<table class="table service-table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Source</th>
            <th>Bindings</th>
            <th>Replicas</th>
            <th>Restarts</th>
            <th>Logs</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var service in application.Services.Values)
        {
            var logsPath = $"logs/{service.Description.Name}";
            var servicePath = $"services/{service.Description.Name}";
            <tr @key="service.Description.Name">
                <td>
                    @if(service.ServiceType == ServiceType.External)
                    {
                        <span>@service.Description.Name</span>
                    }
                    else
                    {
                        <a href="@servicePath">@service.Description.Name</a>
                    }
                </td>
                <td>
                    @service.ServiceType
                </td>
                <td class="source-project">
                    @if (service.Description.RunInfo is ProjectRunInfo project)
                    {
                        <p>@project.ProjectFile.FullName</p>
                    }
                    else if (service.Description.RunInfo is DockerRunInfo docker)
                    {
                        <p>@docker.Image</p>
                    }
                </td>
                <td>
                    @if (GetUrls(service) is IEnumerable<string> urls && urls.Any())
                    {
                        foreach (var url in urls)
                        {
                            if (url.StartsWith("http://") || url.StartsWith("https://"))
                            {
                                <span class="binding"><a href="@url" target="_blank">@url</a></span>
                            }
                            else
                            {
                                <span class="binding">@url</span>
                            }
                        }
                    }
                    else
                    {
                        <p>none</p>
                    }
                </td>
                @if(service.ServiceType == ServiceType.External)
                {
                    <td colspan=3></td>
                }
                else
                {
                    <td>@service.Replicas.Count/@service.Description.Replicas</td>
                    <td>@service.Restarts</td>
                    <td><NavLink href="@logsPath">View</NavLink></td>
                }
            </tr>
        }
    </tbody>
</table>

@code {

    private List<IDisposable> _subscriptions = new List<IDisposable>();
    private List<ServiceDescription> _ingressDescriptions = new List<ServiceDescription>();
    private const string INGRESS_NAME = "INGRESS";

    string GetUrl(ServiceBinding b)
    {
        return $"{(b.Protocol ?? "tcp")}://{b.Host ?? "localhost"}:{b.Port}";
    }

    IEnumerable<string> GetUrls(Service service)
    {
        foreach (var binding in service.Description.Bindings)
        {
            if (binding.Port != null)
            {
                var url = GetUrl(binding);
                yield return url;
                foreach (var r in binding.Routes)
                {
                    yield return url + r;
                }
            }
            else if (!string.IsNullOrEmpty(binding.ConnectionString))
            {
                yield return binding.ConnectionString;
            }
        }

        foreach (ServiceDescription description in _ingressDescriptions)
        {
            foreach (IngressRule rule in (description?.RunInfo as IngressRunInfo)?.Rules ?? Enumerable.Empty<IngressRule>())
            {
                if (rule.Service == service.Description.Name)
                {
                    ServiceBinding? mainBinding = description?.Bindings.FirstOrDefault(b => b.Protocol == "http") ??
                                      description?.Bindings.FirstOrDefault(b => b.Protocol == "https");

                    string? host = rule.Host;
                    if (string.IsNullOrEmpty(host))
                    {
                        host = mainBinding?.Host ?? mainBinding?.IPAddress ?? "localhost";
                    }
                    int port = mainBinding?.Port ?? 80;

                    string url = GetUrl(new ServiceBinding
                    {
                        Port = port,
                        Host = host,
                        Protocol = mainBinding?.Protocol ?? "http"
                    });
                    if (!string.IsNullOrEmpty(rule.Path))
                    {
                        url += rule.Path;
                    }
                    yield return url;
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        foreach (var a in application.Services.Values)
        {
            _subscriptions.Add(a.ReplicaEvents.Subscribe(OnReplicaChanged));
            if (a.Description.RunInfo is IngressRunInfo)
            {
                _ingressDescriptions.Add(a.Description);
            }
        }
    }

    private void OnReplicaChanged(ReplicaEvent replicaEvent)
    {
        InvokeAsync(() => StateHasChanged());
    }

    void IDisposable.Dispose()
    {
        _subscriptions.ForEach(d => d.Dispose());
    }
}
