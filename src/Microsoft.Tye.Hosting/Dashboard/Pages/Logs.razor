@page "/logs/{ServiceName}"
@inject IJSRuntime JS
@inject Application application
@implements IDisposable

<style>
    #logview {
        overflow-y: scroll;
        position: absolute;
        height: 70vh;
        width: 75%;
        color: white;
        background-color: black;
        padding: 10px;
    }

    .autoscroll {
        overscroll-behavior-y: contain;
        -webkit-scroll-snap-type: y proximity;
        -ms-scroll-snap-type: y proximity;
        scroll-snap-type: y proximity;
    }

    .autoscroll > div:last-child {
        scroll-snap-align: end;
        -moz-scroll-snap-align: end;
        padding-bottom: 1rem;
    }
</style>

<h3>Logs for @ServiceName</h3>

@if (ApplicationLogs == null)
{
    <span>Unknown service @ServiceName</span>
}
else
{
    <div style="padding:10px">
        <button type="button" class="btn btn-primary" @onclick=ClearLogs>Clear Log</button>
    </div>
    <div id="logview" class="autoscroll">
        @foreach (var log in ApplicationLogs.TakeLast(1000))
        {
            <div>@log.Text</div>
        }
    </div>
}

@code {
    [Parameter]
    public string ServiceName { get; set; } = default!;

    public List<(string Text, int Id)>? ApplicationLogs { get; set; } 

    private IDisposable? _subscription;

    protected override void OnInitialized()
    {
        // TODO: handle this returning false
        if (application.Services.TryGetValue(ServiceName, out var service))
        {
            ApplicationLogs = service.CachedLogs.Select((item, index) => (item, index)).ToList();
            var count = ApplicationLogs.Count;
            StateHasChanged();

            _subscription = service.Logs.Subscribe(log =>
            {
                count++;
                InvokeAsync(() =>
                {
                    ApplicationLogs.Add((log, count));
                    StateHasChanged();
                });
            });
        }

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await ScrollToBottom();

        await base.OnAfterRenderAsync(firstRender);
    }    

    private void ClearLogs()
    {
        ApplicationLogs?.Clear();
    }

    void IDisposable.Dispose()
    {
        _subscription?.Dispose();
    }

    ValueTask ScrollToBottom()
    {
        return JS.InvokeVoidAsync("logviewScrollToBottom", "logview");
    }
}
    protected override Task